<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mac | forecho 的独立博客]]></title>
  <link href="https://blog.forecho.com/categories/mac/atom.xml" rel="self"/>
  <link href="https://blog.forecho.com/"/>
  <updated>2020-01-11T03:56:41+00:00</updated>
  <id>https://blog.forecho.com/</id>
  <author>
    <name><![CDATA[forecho]]></name>
    <email><![CDATA[caizhenghai@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mac 利器 Hammerspoon 使用指南]]></title>
    <link href="https://blog.forecho.com/use-hammerspoon.html"/>
    <updated>2019-12-26T13:48:22+00:00</updated>
    <id>https://blog.forecho.com/use-hammerspoon</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">引言</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">实现</a>    <ul>
      <li><a href="#section-2" id="markdown-toc-section-2">目录结构</a></li>
      <li><a href="#section-3" id="markdown-toc-section-3">初始化文件</a></li>
      <li><a href="#section-4" id="markdown-toc-section-4">配置文件</a></li>
      <li><a href="#section-5" id="markdown-toc-section-5">实现自动输入法切换功能</a></li>
      <li><a href="#section-6" id="markdown-toc-section-6">切换输入法</a></li>
      <li><a href="#app-" id="markdown-toc-app-">App 启动</a></li>
      <li><a href="#section-7" id="markdown-toc-section-7">自动重载配置</a></li>
      <li><a href="#section-8" id="markdown-toc-section-8">窗口管理</a></li>
      <li><a href="#section-9" id="markdown-toc-section-9">休眠自动关闭蓝牙</a></li>
    </ul>
  </li>
  <li><a href="#section-10" id="markdown-toc-section-10">最后</a></li>
  <li><a href="#section-11" id="markdown-toc-section-11">参考链接</a></li>
</ul>

<h2 id="section">引言</h2>

<p>今天要给大家分享的是一款 Mac 利器 Hammerspoon，通过编写 Lua 脚本可以让这款软件实现以下功能</p>

<ul>
  <li>管理窗口大小以及位置</li>
  <li>软件启动器</li>
  <li>给特定的软件设置中/英文输入法</li>
</ul>

<p>你甚至可以通过编写代码实现</p>

<ul>
  <li>休眠状态关闭蓝牙功能</li>
  <li>连上公司 Wi-Fi 自动静音</li>
  <li>……</li>
</ul>

<p>接下来详细讲解如何实现以上功能。不会 Lua？没关系，只要你有一点点编程经验，代码看起来都不是问题。</p>

<!--more-->

<h2 id="section-1">实现</h2>

<p>我自己的配置代码已经在 GitHub 上开源，有兴趣的可以直接去读源码 - <a href="https://github.com/forecho/hammerspoon-config">forecho/hammerspoon-config
</a></p>

<h3 id="section-2">目录结构</h3>

<p><code>
.
├── README.md
├── config.lua
├── init.lua
└── modules
    ├── bluetoothSleep.lua
    ├── defaultInput.lua
    ├── input.lua
    ├── launcher.lua
    ├── reload.lua
    └── window.lua
</code></p>

<ul>
  <li><code>init.lua</code> 是入口文件</li>
  <li><code>config.lua</code> 是配置文件，通过修改此文件，定制化自己的需求</li>
  <li><code>modules</code> 是每个模块的文件夹，具体功能都在这里实现</li>
</ul>

<h3 id="section-3">初始化文件</h3>

<p><code>init.lua</code></p>

<p>&#8220;`lua</p>

<p>require “modules.reload”
require “config”
require “modules.window”
require “modules.launcher”
require “modules.input”
require “modules.defaultInput”
require “modules.bluetoothSleep”</p>

<p>– 调试代码
hs.hotkey.bind({‘cmd’, ‘shift’}, ‘h’, function() 
	hs.alert(‘Hello World’) 
	speaker = hs.speech.new()
	speaker:speak(“Hammerspoon is online”)
	hs.notify.new({title=”Hammerspoon launch”, informativeText=”Boss, at your service”}):send()
end)</p>

<p>&#8220;`</p>

<h3 id="section-4">配置文件</h3>

<p><code>config.lua</code></p>

<p>&#8220;`lua</p>

<p>windowHotkey = {‘control’,’command’}
launcherHotkey = {‘option’}
inputHotkey = {‘option’}</p>

<p>applist = {
    {shortcut = ‘Q’,appname = ‘QQ’},
    {shortcut = ‘G’,appname = ‘Google Chrome’},
    {shortcut = ‘C’,appname = ‘Visual Studio Code’},
    {shortcut = ‘I’,appname = ‘iTerm’},
    {shortcut = ‘P’,appname = ‘PHPStorm’},
    {shortcut = ‘W’,appname = ‘WeChat’},
    {shortcut = ‘O’,appname = ‘Postman’},
    {shortcut = ‘Y’,appname = ‘企业微信’},
}</p>

<p>appInputMethod = {
    {‘/Applications/iTerm.app’, ‘English’},
    {‘/Applications/Visual Studio Code.app’, ‘English’},
    {‘/Applications/PHPStorm.app’, ‘English’},
    {‘/Applications/Xcode.app’, ‘English’},
    {‘/Applications/Google Chrome.app’, ‘English’},
    {‘/System/Library/CoreServices/Finder.app’, ‘English’},
    {‘/Applications/DingTalk.app’, ‘Chinese’},
    {‘/Applications/Kindle.app’, ‘English’},
    {‘/Applications/NeteaseMusic.app’, ‘Chinese’},
    {‘/Applications/WeChat.app’, ‘Chinese’},
    {‘/Applications/System Preferences.app’, ‘English’},
    {‘/Applications/Dash.app’, ‘English’},
    {‘/Applications/MindNode.app’, ‘Chinese’},
    {‘/Applications/QQ.app’, ‘Chinese’},
    {‘/Applications/企业微信.app’, ‘Chinese’},
    {‘/Applications/wechatwebdevtools.app’, ‘English’},
    {‘/Applications/Sketch.app’, ‘English’},
}</p>

<p>&#8220;`</p>

<h3 id="section-5">实现自动输入法切换功能</h3>

<p><code>defaultInput.lua</code></p>

<p>&#8220;`lua</p>

<p>local function Chinese()
    hs.keycodes.currentSourceID(“com.sogou.inputmethod.sogou.pinyin”)
end</p>

<p>local function English()
    hs.keycodes.currentSourceID(“com.apple.keylayout.ABC”)
end</p>

<p>function updateFocusAppInputMethod()
    local focusAppPath = hs.window.frontmostWindow():application():path()
    for index, app in pairs(appInputMethod) do
        local appPath = app[1]
        local expectedIme = app[2]</p>

<pre><code>    if focusAppPath == appPath then
        if expectedIme == 'English' then
            English()
        else
            Chinese()
        end
        break
    end
end end
</code></pre>

<p>– helper hotkey to figure out the app path and name of current focused window
hs.hotkey.bind({‘ctrl’, ‘cmd’}, “.”, function()
    hs.alert.show(“App path:        “
    ..hs.window.focusedWindow():application():path()
    ..”\n”
    ..”App name:      “
    ..hs.window.focusedWindow():application():name()
    ..”\n”
    ..”IM source id:  “
    ..hs.keycodes.currentSourceID())
end)</p>

<p>– Handle cursor focus and application’s screen manage.
function applicationWatcher(appName, eventType, appObject)
    if (eventType == hs.application.watcher.activated) then
        updateFocusAppInputMethod()
    end
end</p>

<p>appWatcher = hs.application.watcher.new(applicationWatcher)
appWatcher:start()</p>

<p>&#8220;`</p>

<h3 id="section-6">切换输入法</h3>

<p><code>input.lua</code> 实现切换输入法功能，这个已经弃用了，最后还是使用系统自带的快捷键了，代码放出来给大家参考：</p>

<p>&#8220;`lua</p>

<p>local function Chinese()
    hs.keycodes.currentSourceID(“com.sogou.inputmethod.sogou.pinyin”)
end</p>

<p>local function English()
    hs.keycodes.currentSourceID(“com.apple.keylayout.ABC”)
end</p>

<p>hs.hotkey.bind(inputHotkey, ‘S’, function() 
    Chinese()
end)</p>

<p>hs.hotkey.bind(inputHotkey, ‘E’, function() 
    English()
end)</p>

<p>local function cycleInputMethod()
    if hs.keycodes.currentSourceID() == “com.apple.keylayout.ABC” then
        hs.keycodes.currentSourceID(“com.sogou.inputmethod.sogou.pinyin” )
    elseif hs.keycodes.currentSourceID() == “com.sogou.inputmethod.sogou.pinyin” then
        hs.keycodes.currentSourceID(“com.apple.inputmethod.SCIM.ITABC”)
    elseif hs.keycodes.currentSourceID() == “com.apple.inputmethod.SCIM.ITABC” then
        hs.keycodes.currentSourceID(“com.apple.keylayout.ABC”)
    end
end</p>

<p>hs.hotkey.bind(inputHotkey, ‘.’, cycleInputMethod)</p>

<p>&#8220;`</p>

<h3 id="app-">App 启动</h3>

<p><code>launcher.lua</code>，可以实现特定的快捷键启动指定的软件，使用最频繁的功能了，妥妥的提升效率。实现代码如下：</p>

<p>&#8220;`lua</p>

<p>hs.fnutils.each(applist, function(entry)
    hs.hotkey.bind(launcherHotkey, entry.shortcut, entry.appname, function()
        hs.application.launchOrFocus(entry.appname)
    end)
end)</p>

<p>&#8220;`</p>

<p>修改 <code>config.lua</code> 文件，定制化自己的需求。</p>

<h3 id="section-7">自动重载配置</h3>

<p>不用手动点击刷新，自动重载 Hammerspoon 配置</p>

<p>&#8220;`lua</p>

<p>local function reloadConfig(paths)
    doReload = false
    for _,file in pairs(paths) do
        if file:sub(-4) == “.lua” then
            print(“A lua config file changed, reload”)
            doReload = true
        end
    end
    if not doReload then
        print(“No lua file changed, skipping reload”)
        return
    end</p>

<pre><code>hs.reload() end
</code></pre>

<p>configFileWatcher = hs.pathwatcher.new(os.getenv(“HOME”) .. “/.hammerspoon/”, reloadConfig)
configFileWatcher:start()</p>

<p>&#8220;`</p>

<h3 id="section-8">窗口管理</h3>

<p><code>window.lua</code>，我只有最大化和两个显示器换屏的需求，所以只实现的这个功能，还可以实现二分之一屏幕的需求，参考本文末尾给的参考链接。</p>

<p>&#8220;`lua</p>

<p>hs.hotkey.bind(windowHotkey, ‘return’, function()
    hs.grid.maximizeWindow()
end)</p>

<p>hs.hotkey.bind(windowHotkey, ‘F’, function() 
    hs.window.focusedWindow():toggleFullScreen()
end)</p>

<p>hs.hotkey.bind(windowHotkey, ‘left’, function()
    local w = hs.window.focusedWindow()
    if not w then
        return
    end
    local s = w:screen():toWest()
    if s then
        w:moveToScreen(s)
    end
end)</p>

<p>hs.hotkey.bind(windowHotkey, ‘right’, function()
    local w = hs.window.focusedWindow()
    if not w then
        return
    end
    local s = w:screen():toEast()
    if s then
        w:moveToScreen(s)
    end
end)</p>

<p>&#8220;`</p>

<h3 id="section-9">休眠自动关闭蓝牙</h3>

<p><code>bluetoothSleep.lua</code>，无意中发现 Mac 电脑休眠的时候蓝牙居然还出于开着的状态，感觉有点浪费电，使用写了一个脚本实现蓝牙自动开关功能。</p>

<p>使用这个功能之前先要安装 <code>blueutil</code></p>

<p><code>sh
brew install blueutil
</code></p>

<p>&#8220;`lua</p>

<p>function bluetoothSwitch(state)
    – state: 0(off), 1(on)
    cmd = “/usr/local/bin/blueutil –power “..(state)
    result = hs.osascript.applescript(string.format(‘do shell script “%s”’, cmd))
end</p>

<p>function caffeinateCallback(eventType)
    if (eventType == hs.caffeinate.watcher.screensDidSleep) then
      print(“screensDidSleep”)
    elseif (eventType == hs.caffeinate.watcher.screensDidWake) then
      print(“screensDidWake”)
    elseif (eventType == hs.caffeinate.watcher.screensDidLock) then
      print(“screensDidLock”)
      bluetoothSwitch(0)
    elseif (eventType == hs.caffeinate.watcher.screensDidUnlock) then
      print(“screensDidUnlock”)
      bluetoothSwitch(1)
    end
end</p>

<p>caffeinateWatcher = hs.caffeinate.watcher.new(caffeinateCallback)
caffeinateWatcher:start()</p>

<p>&#8220;`</p>

<h2 id="section-10">最后</h2>

<p>Hammerspoon 能做的事情当然远不知这些，但是这些功能已经让我事半功倍了，最重要的是这个软件开源免费！</p>

<h2 id="section-11">参考链接</h2>

<ul>
  <li><a href="https://www.hammerspoon.org/">Hammerspoon</a></li>
  <li><a href="https://thinkhard.tech/2019/04/08/hammerspoon-introduce/">推荐一个 MacOS 上用了就无法自拔的神器 [Hammerspoon] 和我的配置方案</a></li>
  <li><a href="https://zhuanlan.zhihu.com/p/59737941">『Hammerspoon』Mac 锁屏自动开关蓝牙</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac 安装 Docker]]></title>
    <link href="https://blog.forecho.com/mac-install-docker.html"/>
    <updated>2015-07-26T14:55:53+00:00</updated>
    <id>https://blog.forecho.com/mac-install-docker</id>
    <content type="html"><![CDATA[<h2 id="section">前言</h2>

<p>前几天 MacBook 拿去修了，回来时候貌似覆盖的方式重装了一回系统了。反正就是 Apache 环境都没了，索性借这次机会使用一下 Docker 吧。</p>

<h2 id="section-1">安装</h2>

<p>根据<a href="https://docs.docker.com/mac/step_one/">官网的文档</a>安装 Docker，如果一切正常的话就是下载一个软件，双击傻瓜式的安装就可以了。</p>

<h2 id="section-2">下载太慢怎么办？</h2>

<p>刚才找到一个国内的<a href="http://get.daocloud.io/#install-boot2docker">镜像</a>，速度还不错，推荐。</p>

<h2 id="section-3">安装失败报错怎么办？</h2>

<p><code>sh
&gt; docker run hello-world
&gt; FATA[0000] Post http:///var/run/docker.sock/v1.18/containers/create: dial unix /var/run/docker.sock: no such file or directory. Are you trying to connect to a TLS-enabled daemon without TLS?
  FAIL
</code></p>

<!--more-->

<p>解决办法参考<a href="http://chinhui-blog.logdown.com/posts/263035-note-on-a-mac-using-the-docker">[DevOp] Mac上使用Docker</a> 和 <a href="http://blog.csdn.net/delphiwcdj/article/details/41780063">Mac OS X Yosemite 10.10.1安装Docker</a></p>

<h2 id="section-4">测试是否安装成功</h2>

<p>参考这篇文章：<a href="http://chinhui-blog.logdown.com/posts/263794-note-docker-on-mac-2">[DevOp] Mac上使用Docker (2)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac 安装 PHP5.4 的 Mcrypt 扩展]]></title>
    <link href="https://blog.forecho.com/Mac-an-zhuang-PHP5-4-de-Mcrypt-kuo-zhan.html"/>
    <updated>2014-03-01T14:34:00+00:00</updated>
    <id>https://blog.forecho.com/Mac-an-zhuang-PHP5-4-de-Mcrypt-kuo-zhan</id>
    <content type="html"><![CDATA[<p>忘记什么时候把 MacBook 的 PHP 版本升级到 PHP5.4了，然后准备学一下 Laravel 这个框架的时候，提醒 Mcrypt 扩展未安装。</p>

<p>安装这个扩展真是头疼，尽管有 Homebrew ，尽管能 Google 到很多英文很好的教程，有简单的命令的，有复杂命令的，但是照着教程敲代码还是安装不成功。</p>

<p>在终端输入 php -v 的时候，会出现下面报错代码：</p>

<pre><code>PHP Warning:  PHP Startup: Unable to load dynamic library '/usr/lib/php/extensions/no-debug-non-zts-20100525/mcrypt.so' - dlopen(/usr/lib/php/extensions/no-debug-non-zts-20100525/mcrypt.so, 9): image not found in Unknown on line 0
PHP 5.4.17 (cli) (built: Aug 25 2013 02:03:38)
Copyright (c) 1997-2013 The PHP Group
Zend Engine v2.4.0, Copyright (c) 1998-2013 Zend Technologies
</code></pre>

<p>但是我 /etc/php.ini 配置文件里面根本没有 /usr/lib/php/extensions/no-debug-non-zts-20100525/ 这个路径，也不记得这个东西在哪？怎么修改？</p>

<p>剩下的我只能继续 Google，找几份教程一起来，然后我发现了这个：<a href="http://topicdesk.com/downloads/mcrypt/mcrypt-download">Mcrypt installer for OS X 10.8/10.9</a> 不注意的话，估计会忽略最下面的<a href="http://downloads.topicdesk.com/installers/topicdesk_Mcrypt_Installer_1.0.zip">下载链接</a>。</p>

<p>我下载下来试了一下，安装步骤就跟安装软件是一样的，一直点下一步就好了，然后我在输出 phpinfo() 的页面，竟然搜索到了 Mcrypt ，这就说明我安装成功了，然后试了一下 Laravel 首页，果然成功了。</p>

<p>还是这个方便省事，感谢这个软件。</p>

<p>最后分享一个学 Laravel 的资源：<a href="https://github.com/maliang/LikeLaravel">https://github.com/maliang/LikeLaravel </a></p>
]]></content>
  </entry>
  
</feed>
