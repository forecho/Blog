<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 思考 | forecho 的独立博客]]></title>
  <link href="https://blog.forecho.com/categories/si-kao/atom.xml" rel="self"/>
  <link href="https://blog.forecho.com/"/>
  <updated>2020-01-11T03:56:41+00:00</updated>
  <id>https://blog.forecho.com/</id>
  <author>
    <name><![CDATA[forecho]]></name>
    <email><![CDATA[caizhenghai@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[谈谈《时间的朋友》]]></title>
    <link href="https://blog.forecho.com/time-friends.html"/>
    <updated>2017-01-15T15:32:22+00:00</updated>
    <id>https://blog.forecho.com/time-friends</id>
    <content type="html"><![CDATA[<h2 id="section">引言</h2>

<p>《时间的朋友》是罗振宇从2015年开始的一年一场跨年演讲晚会，说是要坚持20年，就是每年的元旦跨年给我们总结当年发生的一些事情。前几天我听了这场演讲会的音频，趁着脑子里还有点记忆写下我的一点收获，顺便分享一些我的想法。</p>

<h2 id="section-1">罗辑思维</h2>

<p>刚才查了一下<a href="http://baike.baidu.com/item/%E7%BD%97%E8%BE%91%E6%80%9D%E7%BB%B4/2192931">百科</a>，发现罗辑思维是2012年底开始的，而我应该是14年才开始听他们的节目的，基本上都是在手机上听播客的方式收听他们的节目。</p>

<p>《罗辑思维》当初的口号是『死磕自己，愉悦大家！』，确实很吸引我，让我每次在通勤的路上不再那么无聊，同时也让我听到了很多有趣的故事，当初应该也算他们的粉丝了，不然当初也不会买他们出的两本书辑了吧。</p>

<p>2016年之后也能是因为时间太忙很少听过他们的节目了，后来在知乎上发现一些他们『恶心』的行为，然后又经历「papi酱」的事件，让我认清了他是一个非常『精明』的商人事实，从此粉转路人。但是我不会因为这样原因从此屏蔽他的一切，我还是会偶尔去听一下他的节目，
只是报着和当初不一样的心情。</p>

<p>事情背景交代清楚了，下面我们进入正题。</p>

<!--more-->

<h2 id="section-2">时间的朋友</h2>

<p>去年的《时间的朋友》我也听过，现在仍然记得的是关于滴滴创业的故事还有乐视和暴风影音股票的事情，其他的都忘记了。好记性不如烂笔头，所以今年我打算记下我这次的收获：</p>

<p><strong>时间战场</strong></p>

<p>这个我是深有感受，很早之前就看到有一篇文章提出过这个概念，类似这种：多看的竞争对手不是kindle，是用户玩游戏的时间。</p>

<p>『时间就是金钱』- 富兰克林说的一点都没错。你仔细想想，你在生活中有哪些是用金钱换时间的事情？我就随便说几个：打车出行，坐高铁。这种事情在大多数游戏中，发挥的淋漓尽致，没花人民币的玩家，要花大量的时间打怪做任务升级买装备，而人民币玩家可以用钱一步解决这些问题。</p>

<p>当然做任何事件都是有代价的，你要结合你自身情况来做决策。初中的时候我跟舅舅他们一家出去玩，4、5个人为了省十几块钱的公交费我们走了2个多小时到商场，再走回来，累得要死。穷人的时间不值钱，但是越有钱的人时间越值钱。所以如果你的创业方向正好是给有钱人提供服务帮助他们节约时间的话，项目应该不会很差。</p>

<p><strong>服务升级</strong></p>

<p>这个我简单说一下，现在我们的生活消费水平上升了，我们更愿意多花那么一点钱让自己得到更好的服务。</p>

<p><strong>智能革命</strong></p>

<p>由于技术的快速发展，我相信我们马上就能体会智能时代的便利。就那我来说，以前我用 App 记账，需要动手一个一个选择，然后再输入金额，而前一阵子我体会到 Siri 的便利之后，我就想为什么不能语音记账呢？然后一搜索，果然有，用到现在都半个月了，体验非常好，以前记个帐都要点好几下屏幕的，现在一句话搞定，从此再也不怕记账麻烦了，而且还智能的帮你分类。</p>

<p>同样的，我也找到了滴答清单帮我搞定了语音记录代办事件的事情。</p>

<p><strong>吃饭</strong></p>

<p>这个是王石分享的内容，我也深有体会。这也是我上班很少点外卖的其中一个原因。大家上班工作都很忙，上班沟通很少。</p>

<p><strong>睡觉</strong></p>

<p>好的睡觉质量对一个人来说非常重要，其实我也是那种躺下就立马睡着的人，这是你们羡慕不来的。怎么说呢？放空自己，睡前不要想太多。</p>

<h2 id="section-3">总结</h2>

<p>《罗辑思维》其实是一个打发时间不错的节目，但是别想着指望通过这个节目来代替你看书，读书这种事情，真得亲自来！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的知识管理工作流]]></title>
    <link href="https://blog.forecho.com/knowledge-management-workflow.html"/>
    <updated>2016-12-12T04:09:22+00:00</updated>
    <id>https://blog.forecho.com/knowledge-management-workflow</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">引言</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">阅读流</a></li>
  <li><a href="#section-2" id="markdown-toc-section-2">工作流</a></li>
  <li><a href="#section-3" id="markdown-toc-section-3">其他</a></li>
  <li><a href="#section-4" id="markdown-toc-section-4">补充</a></li>
  <li><a href="#section-5" id="markdown-toc-section-5">最后</a></li>
</ul>

<h2 id="section">引言</h2>

<p>很多碎片知识如果不整理出来，在你的大脑里面永远都是碎片。上次无意中阅读到<a href="https://zi.com/w/a/164a3It">《应对信息过载的正确姿势》</a>和<a href="http://sspai.com/36795">《在线阅读处理流程：从需求、到方法、再到工具》</a>这两篇文章，让我很受益，于是打算整理一下自己获取知识和信息的方式，达到记录-&gt;整理-&gt;优化流程的目的。</p>

<h2 id="section-1">阅读流</h2>

<p>我的阅读流程是这样的：</p>

<p><strong>书</strong></p>

<p><img src="https://blog-1251237404.cos.ap-guangzhou.myqcloud.com/20190424162239.png" alt="萝卜书摘" /></p>

<p>最近大多数情况下都在用 kindle 看电子书，家里也有很多纸质书。</p>

<p>一般看书时间是在上下班通勤的地铁上，如果晚上10点之后还有时间，会看40分钟的书再睡觉。</p>

<ul>
  <li>
    <p>如果是 Kindle，看到好句子会标记，使用 <a href="https://www.clippings.io">clippings.io</a> 服务导出笔记，整理到印象笔记，最后有需要的话再整理到博客中。</p>
  </li>
  <li>
    <p>如果是纸质书，看到好句子会使用一款叫做<a href="https://3li3.com/app/view?id=60745">萝卜书摘</a>的 App 记录，然后也可以导出到印象笔记（收费服务），最后如果有需要的话再整理到博客中。</p>
  </li>
</ul>

<p>我的体验是：技术书类的书可能更适合纸质版或者正版 PDF，大多数技术类的书不太合适用 kindle 看，有代码部分基本上是不忍直视，PDF 的话可以用 iPad 看，屏幕大一点效果会更好。
Kindle 版的电子书，标记和索引很方便，而且出门携带也非常轻巧，所以绝大多数的非技术类书都非常适合使用 Kindle 来阅读。</p>

<p>总结流程：书-&gt;标记-&gt;印象笔记-&gt;博客</p>

<!--more-->

<p><strong>碎片阅读</strong></p>

<p>目前最常用的碎片阅读有四款 App，根据使用频率排名如下：</p>

<ol>
  <li><a href="https://3li3.com/app/view?id=8017">Reeder</a>：买过绝对没后悔的 App，基本上每天都在使用，30 块钱还有 iPad 版，值。Reeder 配合 <a href="https://www.inoreader.com/">inoreader</a> 管理订阅源，很好用。管理订阅源也需要有一套技巧，
我给自己新建了一个「必读」文件夹，时间少的情况下只阅读「必读」文件夹，如果还有时间再看其他。这里推荐两个优质的 RSS：一个是<a href="http://wanqu.co/feed/">湾区日报</a>，一个是<a href="http://liqi.io/feed/">利器</a>。</li>
  <li><a href="https://3li3.com/app/view?id=8016">Tweetbot</a>：微博现在广告越来越多了，而且感觉微博已经是大V 的天下了，还是喜欢 twitter，关注了很多人，同样自己也新建了一个「特别关注」组，时间少的情况下只看「特别关注」组，如果还有时间再看其他。</li>
  <li><a href="https://3li3.com/app/view?id=8054">Flipboard</a>：阅读体验非常好，很喜欢那个翻页效果。偶尔会打开看一些资讯，深度文章会发到 <a href="http://getpocket.com/">Pocket</a>，Pocket 使用了 <a href="https://p2k.co/">P2K</a> 服务，定时把文章发送到 Kindle 阅读。</li>
  <li><a href="https://3li3.com/app/view?id=27603">奇点</a>：2.0 版之后免费+付费模式，可以说是拯救了我看微博的习惯，偶尔想看微博会用这个。其中的「精选收藏」是必读的。</li>
</ol>

<p>其他时间如果在上网的时候看到好的文章，会使用 Chrome浏览器的 Pocket 扩展把文章发到 Pocket 稍后阅读。</p>

<p>总结一下就是：学会给文章制定阅读优先级，分清必读和泛读。</p>

<h2 id="section-2">工作流</h2>

<p><strong>解决问题的流程</strong></p>

<ul>
  <li>第一永远记得先看错误日志以及各种其他日志。比方说：如果是代码问题，先看代码的日志。如果是环境问题，看 Nginx 日志。</li>
  <li>使用 Google 搜索你的错误信息（不推荐百度），最好使用全英文关键词搜索你需要的信息。</li>
  <li>看源码，看文档检查自己使用方式是否有问题。</li>
  <li>如果还没解决的话，试一下<a href="https://zh.wikipedia.org/wiki/%E5%B0%8F%E9%BB%84%E9%B8%AD%E8%B0%83%E8%AF%95%E6%B3%95">小黄鸭调试法</a></li>
  <li>还是没解决？请教别人吧。但是也要学会提问，看了解<a href="https://github.com/ruby-china/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md">提问的智慧</a>，你会终生受益。</li>
</ul>

<p>以上是我解决问题的方式，绝大多数情况下到了第二步就能解决了。</p>

<p><strong>知识的沉淀</strong></p>

<p>解决问题之后要学会知识沉淀，这些都是经验，没有沉淀的知识过几天你就会忘记了。那么我是怎么沉淀知识的呢？</p>

<p>如果使用 Google 找到了一篇解决方案的话，如果正好能解决我的问题的话，我会使用<a href="https://chrome.google.com/webstore/detail/evernote-web-clipper/pioclpoplcdbaefihamjohnefbikjilc">印象笔记·剪藏</a>收藏到我的印象笔记（此功能也是我一直在使用印象笔记而不是其他类似产品的原因）。
很多情况下，这个问题有可能会出现第二次，而这样做有两个好处：</p>

<ol>
  <li>可以在印象笔记中能快速找到上次解决方案的文章</li>
  <li>如果遇到之前帮你解决问题的文章404了，如果你收藏到了印象笔记就还可以继续查看。</li>
</ol>

<p>如果遇到的问题有点难，是我费劲心思才解决的，我会先简单把思路记录到印象笔记中，稍后有时间整理成一篇文章，分享到博客中。</p>

<h2 id="section-3">其他</h2>

<p>在这个信息过载的时代，获取信息已经非常的容易了，面对如海水一般的信息时，我们要学会的是做减法。</p>

<p><strong>播客</strong></p>

<p><img src="https://blog-1251237404.cos.ap-guangzhou.myqcloud.com/20190424162339.png" alt="Imgur" /></p>

<p>有时候早上挤地铁的时候，人多到 Kindle 都拿不出来的情况，这个时候我一般会听播客。还有一种情况就是眼睛太累了，需要闭眼休息的时候。</p>

<p>我听播客已经有3年多的时间了，我也记不太清楚第一次听的是什么了，到现在我听的最久的播客是 <a href="http://teahour.fm/">Teahour.fm</a> ，可以说基本上每期都听了（个别几期录制效果不太好，没听完），收获很大，非常喜欢。</p>

<p>下面分享几款我听的播客节目，按推荐程度依次递减排名：</p>

<ol>
  <li><a href="http://teahour.fm/">Teahour.fm</a></li>
  <li>吴晓波频道</li>
  <li>代码时间（前几天才发现的播客，听了两集）</li>
  <li>极客电台</li>
  <li>迟早更新</li>
  <li>一席（我在上面听到过：饿了么的创始人，法医清明的作者，大冰等人的分享，非常有意思的节目）</li>
  <li>王自健脱口秀（有时候也需要放松一下）</li>
  <li>罗辑思维（1年前听的多，现在听的少了）</li>
</ol>

<p>《冬吴相对论》的播客也非常不错，可惜在2014年底的时候就没更新了，相见恨晚。</p>

<p>顺便推荐两款 iOS 播客 App，叫 <a href="https://3li3.com/app/view?id=147241">Castro</a> 和 <a href="https://3li3.com/app/view?id=8052">Overcast</a>，他们两个有一个共同的特点，就是有「智能加速」功能，可以帮你省一些时间。</p>

<p><strong>与人交流</strong></p>

<blockquote>
  <p>读万卷书不如行万里路 行万里路不如阅人无数</p>
</blockquote>

<p>所以说，与人交流是更高一个 Level，这也是我为啥每天中午坚持不叫外卖，而是跟同事一起出去吃饭的原因之一。平常上班大家各忙各的，也只有吃饭时间才有更多的交流。</p>

<p>平常也可以多关注一些活动，技术和非技术的都可以参加。推荐两种获取活动的方式：</p>

<ul>
  <li><a href="https://segmentfault.com/events">SegmentFault 活动版块</a></li>
  <li><a href="https://3li3.com/app/view?id=107852">每日环球展览 · iDaily Museum </a></li>
</ul>

<p><strong>制定清单</strong></p>

<p><img src="https://blog-1251237404.cos.ap-guangzhou.myqcloud.com/20190424162400.png" alt="Imgur" /></p>

<p>永远有一个 Todo List，让自己永远有事情代办，可以给事情标记优先级。利用天每天的碎片时间，也可以记录下每一次的灵感。</p>

<p>目前我两个最长用的 App 来管理这些清单，一个是 <a href="https://www.wunderlist.com">Wunderlist</a>，免费版足够好用了，里面一般存放长期的列表，比方说：</p>

<ul>
  <li>「写作清单」：记录想写博客的文章标题，简单列出结构层级。</li>
  <li>「收集想法」：每当有灵感时，迅速记录自己的想法，这些以后都是宝贵的财富。</li>
  <li>「购物清单」：想买但是又不急于买的商品。</li>
  <li>……</li>
</ul>

<p>另外要分享的一个 App 是 <a href="https://www.dida365.com">滴答清单</a>，是最近一个月才开始使用的，目前也是使用的是免费版本，够用。「语音输入」功能非常好用。
使用滴答清单是因为我最近半年才开始使用日历来记录代办事件，而滴答清单就是一个加强版的系统自带日历工具。目前我的各种琐碎事情都可以交给它来管理和提醒。</p>

<p><strong>习惯养成</strong></p>

<p><img src="https://blog-1251237404.cos.ap-guangzhou.myqcloud.com/20190424162413.png" alt="" /></p>

<blockquote>
  <p>不积跬步，无以至千里；不积小流，无以成江海。</p>
</blockquote>

<p>每天坚持阅读40分钟的书，很快你就会看完一本书了，同样每天坚持20分钟健身，久而久之就可以练出腹肌和胸肌，最重要的是坚持。</p>

<p>我是使用这些 App 来帮我养成和记录习惯的：</p>

<ul>
  <li><a href="https://3li3.com/app/view?id=8046">种子习惯</a>：UI 小清新，而且有社交服务，一个习惯关联一棵树，如果七天未打卡，树就会死掉，重新来过。</li>
  <li><a href="https://3li3.com/app/view?id=164838">Habitify</a>：UI 也不错，功能很简单，但是也很完善，没有社交，已经购买高级账户，支持开发者。</li>
</ul>

<p>需要分享的是，制定习惯是需要结合自身情况来考虑的，不要一下子给自己太大目标，也不要给自己定的目标太小。那么怎么才算一个合格的目标呢？我认为一个刚刚好的目标至少需要你踮起脚尖才能够得着，但也不需要花很大力气跳起来才够得着的目标才是一个好目标。
比方说，每天阅读20分钟，这显然时间有点太短，一篇章节可能都看不完，那么每天阅读1个小时，如果需要每天坚持的话，可能有点难度，那么40分钟可能就是一个恰到好处的时间。当然这个时间点需要你来把握，我分享的只是经验。</p>

<p>学会利用好 Siri 或者说是学会利用倒计时功能，比方说，我每次阅读都是给自己设置一个40分钟的倒计时，非常好用。</p>

<h2 id="section-4">补充</h2>

<p><img src="https://blog-1251237404.cos.ap-guangzhou.myqcloud.com/20190424162426.png" alt="" /></p>

<p>最近在听一档播客节目的时候了解了一个叫<a href="http://www.geekonomics10000.com/">万维刚</a>的人，以前倒是看到过他写的<a href="https://book.douban.com/subject/25986341/">《万万没想到：用理工科思维理解世界》</a> 这本书，但是还没来得及看内容。
在<a href="http://www.justing.com.cn/#/authors/22862">静雅思听</a>上听了一些他的书，觉得非常有意思，收获很大。根据「得到」中看到的<a href="https://m.igetget.com/try/article/cid/855">《两种技能增长曲线》</a> 分析，我认为以上的知识管理会是一个「指数增长」的技能。</p>

<ul>
  <li>对数增长：初期的进步速度非常快，到后面则越来越慢，最后几乎是一个平台期，哪怕你付出极大的努力，也只能获得一点小小的突破。比方说：学外语；体育运动；健身；减肥。</li>
  <li>指数增长：从你开始做这件事情，一直到很长很长时间内，几乎没有任何能让外人看出来的进步。一直到某个时候，你就好像突破了一个什么障碍一样，水平一下子就显现出来了，然后还越增长越快。 比方说：很多技术的进步；企业的成长，个人财富的增长，乃至你写个博客点击量的增加。</li>
</ul>

<p>指数增长最大的风险就是中途退出。（在学习任何技能之前，能区分出这个技能的学习是符合对数增长还是曲线增长，能让我们更好的把握进度。）</p>

<h2 id="section-5">最后</h2>

<p>以上分享是我目前生活获取知识和积累知识的方式，后续可能还会不断优化，但目前来说，已经让我的生活非常「忙碌」了。</p>

<p>最后，如果你从我的分享中有所收获，那是我的荣幸，也希望你能分享你的知识管理流。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何面试一个人]]></title>
    <link href="https://blog.forecho.com/how-to-interview-a-person.html"/>
    <updated>2016-07-19T15:47:22+00:00</updated>
    <id>https://blog.forecho.com/how-to-interview-a-person</id>
    <content type="html"><![CDATA[<h2 id="section">引言</h2>

<p>这事儿我得先从2013年我刚来深圳开始说起。由于厌倦了外包公司和只是简单维护公司网站的工作，我离开了待了4年（上学2年半，工作1年半）之久的武汉，抱着一颗想做产品的心来到了深圳。</p>

<p>现在回过头来，已经过去3年了，我当初的想来深圳做的事情算是实现了。</p>

<p>最近我们项目组也在招聘一起工作的小伙伴，HR 也天天发简历过来让我们挑，陆陆续续面试了十几个人，算是没面到几个满意的。</p>

<p>前几天面试了一个工作2年之久，然后连「命名空间」都不懂的人，让我陷入了思考之后，我在反思是我面试的要求太高？这让我想起刚来深圳那阵子的自己，找了半个月仍没找到工作，然后去<a href="http://www.v2ex.com/t/63765#reply2">V2EX</a>上发帖的自己。</p>

<p>所以就有了这篇文章，我试着总结和分享一下「找工作」相关的话题，如果你最近在找工作，可以看看，希望能对你有帮助。</p>

<!--more-->

<h2 id="section-1">如何写一份简历</h2>

<p>刚来深圳的时候我不知道怎么找工作，以前在武汉的时候用的是58同城发简历，但是这招好像在深圳不行。然后跑过一次招聘会，发现妈蛋的我们这行招聘会根本就不会有公司去招人的。</p>

<p>然后试着用智联招聘和前程无忧投简历，也试过在深圳人才网上投过简历，但是真正面试的机会比较少。</p>

<p>后来表哥看了一下我写的简历，在他的指导下，我试着修改的简历，然后就真的找到了工作。我试着总结以下几条：</p>

<ul>
  <li>简历内容最好写与招聘信息相符合的信息，越符合越有面试的机会。可以根据不同的公司写不同的简历</li>
  <li>简历上工作经验最好写3、4个就够了</li>
  <li>项目经验可以写详细点，使用了什么技术栈，负责什么工作</li>
  <li>跟面试职位不想干的工作其实我觉得没必要写</li>
  <li>去面试之前练习一下自我介绍</li>
</ul>

<p>加分项</p>

<ul>
  <li>学会写博客，记录和总结自己的成长</li>
  <li>学会使用 GitHub，并且有开源项目</li>
  <li>经常会去逛技术社区</li>
</ul>

<p>加分项其实还是很重要的，至少会让面试官觉得你不「普通」，会给他留下深刻印象。</p>

<h2 id="section-2">面试</h2>

<p>其实面试的过程中，其实就是你和面试官通过交流互相了解的过程。根据问答你在心里会给来面试的人打分，同样的面试者也会给面试官打分。</p>

<p>一般会根据工作年限不同，要求也不同。对于工作年限不多，但是如果他让我看到很强的求知欲，或者让我看到他对技术非常渴望的情况下，我肯定会对他也感兴趣的。</p>

<p>我看到太多人并是因为所谓的工资高，而不是热爱才去学程序开发的，在我看来他们注定是在开发这块不会成为优秀人的，我看过工作6、7年代码仍然写的烂的人，也看过工作3、4年技术非常扎实的人。其实论时薪来讲，程序员并非是高薪的。我是这样区分他们是否热爱编程的：</p>

<ul>
  <li>是否有开源代码</li>
  <li>是否有自己的 Side Project</li>
  <li>在技术社区是否活跃</li>
  <li>是否关心最新技术动态</li>
  <li>是否喜欢看书，包括而不限于《黑客与画家》</li>
  <li>是否有自己的博客</li>
</ul>

<p>面试的时候除了问一下技术问题，我还会问以下问题：</p>

<ul>
  <li>你是否了解 PHP 的 PSR，PSR 是什么？</li>
  <li>你通过哪些方式提升自己的技术？</li>
  <li>你遇到问题一般是怎么解决的？</li>
  <li>可以说一下你遇到印象最深刻的问题是什么？以及你是如何解决的？</li>
  <li>Composer 是什么，是用来解决什么问题的？</li>
  <li>你认为一个好的代码的特征是什么样子的？</li>
</ul>

<p>主要考察这几点：</p>

<ul>
  <li>招来了是否能直接干活？</li>
  <li>沟通表达能力</li>
  <li>解决问题的能力（这点面试的可能比较难看出）</li>
  <li>是否足够优秀或者有潜力足够优秀</li>
  <li>学习能力（这点面试的可能比较难看出）</li>
</ul>

<h2 id="section-3">最后</h2>

<p>最后我想说的是，面试一个人，仅仅只考面试的时候交流不到一个小时是不太准确的，所以我为什么提倡你写博客写开源代码，对技术人员来说，看看你写过的代码，远比你扯那些没用的要
简单直接也准确好多。所以也就有了这句话「Talk is cheap. Show me the code.」。</p>

<p>给 PHPer 几点建议：</p>

<ul>
  <li>一定要知道<a href="https://psr.phphub.org/">PHP PSR 标准规范</a></li>
  <li><a href="http://laravel-china.github.io/php-the-right-way/">PHP 之道</a> 也应该至少看过一遍，还有这本书，最好也看一遍</li>
  <li>学会使用 GitHub</li>
  <li>不要去做二次开发，即是做了也不要做太久二次开发</li>
  <li>不要轻易的在简历上写「精通」二字</li>
</ul>

<p>也分享几篇文章给大家：</p>

<ul>
  <li><a href="http://zhangshenjia.com/literature/master_on_skill/">面试杂谈：怎样才算“精通xx”？</a></li>
  <li><a href="http://zhangshenjia.com/literature/result_or_target/">结果与目标</a></li>
  <li><a href="https://blog.forecho.com/cheng-wei-yi-liu-de-ren-cai.html">成为一流的人才</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[项目 Beta 版上线总结]]></title>
    <link href="https://blog.forecho.com/beta-online-summary.html"/>
    <updated>2016-05-22T03:17:22+00:00</updated>
    <id>https://blog.forecho.com/beta-online-summary</id>
    <content type="html"><![CDATA[<h2 id="section">引言</h2>

<p>如果要用一个词来总结我的4月，那么就是两个「加班」。自从去年10月底进入新公司的一个月之后，开始进入全新的项目组进行开发工作。</p>

<p>第一版的任务比较多，一直处于赶进度的状态，去年基本上每天都有在加班。内测版上线的前一个星期我们连续工作了12天（那次周末两天都过来加班），
直到4月25号内测版上线那天晚上我们加班到第二天凌晨1点左右才下班。那天之后持续加班的日子总算熬过头了。</p>

<p>下面我要总结几条经验和教训：</p>

<!--more-->

<h2 id="section-1">需求详细设计文档的必要性</h2>

<p>首先立项的时候项目需求不是非常的明确，第一个月经常改需求，但是项目只给了2个月的时间，是非常的紧急，在这种需求不明确，还没有需求详细文档的情况下，开发进度肯定是非常缓慢的。
但是一旦产品经理给出需求设计详细文档开发起来会非常快的，我们以前公司产品是不写需求详细设计文档的，只有原型，呵呵。</p>

<p>需求详细设计文档看似是花费了产品的大量时间来编写，但是大大方便了开发和测试人员。如果没有需求详细设计文档，开发或者测试只会按照原型结合自己的思维方式来工作，所以需求详细设计文档保证了唯一性。
测试验收产品的时候也非常方便。</p>

<h2 id="section-2">合理的预估开发时间</h2>

<p>有一次产品急着要我们评估时间，然后我就没怎么看功能的细节，结果报了1天时间，最后等我去开发的时候，才发现里面有很多坑，1天是不可能完成的。最后因为我的原因没有按照时间完成今进度。</p>

<p>所以开发人员对于时间的预估这个也是非常重要的。需求过来之后首先你要基本预估一下时间，建议你不要很快的给出一个时间，而是仔细看一下需求，把每个需求拆分成最小颗粒的功能点，然后再去预估你开发每个功能点的时间，
最近把每个功能点相加再乘以2就是你的最终开发时间。</p>

<p>不要因为产品给的时间是明天你也给明天，如果你明天还是完成不了，那只会拖累整个项目的进度。一旦拖延次数多了，整个开发组的人都非常的被动。所以你首先要合理的给出
开发时间上报，如果时间产品那边接受不了，可以再商讨一下是不是可以通过加班赶一下进度或者说是否有必要砍掉不是必须要做的功能。</p>

<h2 id="section-3">标记优先级</h2>

<p>不管是需求还是 Bug 我们都应该标记优先级，标记「必须要完成的」和「可以延期处理的」，然后我们优先完成「必须要完成的」的。</p>

<h2 id="section-4">给测试一点时间</h2>

<p>到目前为止我们有两次上线的经历，但是为什么两次我们都是转钟1点钟才下班的呢？我认为原因有两点：</p>

<ul>
  <li>进入测试阶段我们还在改需求或者写需求。正常情况下这个阶段应该就是只改 Bug 的，如果你改在写需求或者改需求，那么项目肯定是不能按时完成上线的。</li>
  <li>测试时间给的太少。项目上线那天，最迟应该下午把所有 Bug 都改完了，然后就等着晚上上线。上线测试一遍，如果有 Bug，立刻改 Bug。</li>
</ul>

<p>以上就是这次项目的总结，希望以后工作尽量标准化，拒绝小作坊工作方式，拒绝不必要的加班。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如果是我来做项目经理]]></title>
    <link href="https://blog.forecho.com/if-I-was-a-project-manager.html"/>
    <updated>2016-03-01T12:56:22+00:00</updated>
    <id>https://blog.forecho.com/if-I-was-a-project-manager</id>
    <content type="html"><![CDATA[<h2 id="section">我所理解的项目经理</h2>

<p>以前的公司之前是没有项目经理的，只有产品经理，或者说，产品经理和项目经理是同一个人。</p>

<p>去年年底入职的这家公司，新项目的人员分配是这样的：包括项目经理和我在内的4个后端工程师（PHPer）都是新招来的。</p>

<p>从12月初到现在的3月初，不到3个月的时间（中间包括春节）项目现在进度终于接近尾声了，天天加班的日子应该算是熬到头了。</p>

<p>这期间我也算是对项目经理工作职位有了一定的了解，我认为一个项目的核心关键人物就是项目经理。</p>

<p>产品经理只负责整理需求，然后给出需求文档还有原型图。</p>

<p>开发工程师负责写功能模块，项目经理就是来分配任务和把控时间，可能会随身调整项目进度的人。</p>

<p>因为项目时间比较紧急，项目经理也参与了写代码。</p>

<!--more-->

<h2 id="section-1">乔尔测试</h2>

<p>乔尔测试是 Joel Spolsky 在2000年8月提出的一个超简单的软件团队质量测试方法（出自我春节看的《软件随想录 卷一》）：</p>

<p><code>
1. 你们用源码管理系统吗？
2. 你们能一键编译么？
3. 你们做每日编译么？
4. 你们有bug数据库么？
5. 你们在写新代码前修改以前的bug吗？
6. 你们的进度表是最新的么？
7. 你们有软件规格说明书么？
8. 程序员的工作环境安静吗？
9. 你们使用了能买到的最好工具吗？
10. 你们有测试人员吗？
11. 你们面试时会要求应聘人员写代码吗？
12. 你们做过走廊可用性测试吗？
</code></p>

<p>这篇文章距离现在已经快有16年了，但是有几条我认为对现在依然有用。（在这里我不得不佩服作者的思想，中文的世界真是太落后了）</p>

<p>这个测试不一定是100%有效，但是确实能看出一些情况。按照这三个月的项目经验，让我来一一回答这个他的问题：</p>

<p><strong>你们用源码管理系统吗？</strong></p>

<p>我们用的是 git。这个算通过了，但是比较坑爹的是团队里面不是每个人都会 git，但是身为一个项目经理你一定要玩转 git。</p>

<p><strong>你们能一键编译么？</strong></p>

<p>我们是 PHP，没有编译这一说，但是按照现在的这个尿性，我们肯定是不会一键 XX 的。</p>

<p><strong>你们做每日编译么？</strong></p>

<p>也没有这一说，但是我会每天下班之前把最新的代码 push 上去。</p>

<p><strong>你们有bug数据库么？</strong></p>

<p>有，用的是明道，公司一直在用这个，内部搭建的，凑合着用吧。</p>

<p><strong>你们在写新代码前修改以前的 bug 吗？</strong></p>

<p>不修改，我们都是先写功能最后在统一测试。但是现在是一个特殊时期，因为现在项目是从0到1的过程，以后肯定会先修改以前的 bug 在写新代码的。</p>

<p><strong>你们的进度表是最新的么？</strong></p>

<p>这个我认为是最坑爹的了，刚开始项目经理用软件画甘特图规划项目来着，但是真正开始写项目的时候，都没按照那个来，而且他画那个图我只
在我们开会的时候看过一次。所以我们从开始写代码之后就没有什么项目进度表了，也有可能项目经理自己有一份文档在更新吧，反正项目组的其他
成员是不知道项目进度的，也不知道什么功能做了什么功能没做，只知道个大概。</p>

<p>技术总监也老是在群里催进度啊。</p>

<p><strong>你们有软件规格说明书么？</strong></p>

<p>这个还是靠新来的产品总监给力，写了比较详细的需求文档。大部分功能都写了，也算比较详细，应该有80%了。</p>

<p>说实话这算是第一次看到需求文档的详细设计，之前的产品经理能给你画原型就不错了。</p>

<p><strong>程序员的工作环境安静吗？</strong></p>

<p>这个还算可以吧，办公室是大客厅，上班的时候自己待上耳机基本上就可以集中精力了，当然肯定是比不上晚上加班的安静。</p>

<p><strong>你们使用了能买到的最好工具吗？</strong></p>

<p>公司 Mac 都不给配置，双显示器都没有，主机配置倒是还可以，只能说一般，软件就不说了，在中国大家都懂的。</p>

<p><strong>你们有测试人员吗？</strong></p>

<p>这个有，但是都是功能性的测试，压力测试什么的还是考自己吧。</p>

<p><strong>你们面试时会要求应聘人员写代码吗？</strong></p>

<p>这个我们公司倒是没有，其实我也比较怕面试写代码，因为平常考 IDE 写代码依赖性太强了，很多东西记不住。</p>

<p><strong>你们做过走廊可用性测试吗？</strong></p>

<blockquote>
  <p>走廊可用性测试是指，你随便从走廊抓过来一个路人，然后要求他们试用你刚写的程序。如果你这样测试了5个人，你能发现产品在易用性方面95%的问题。</p>
</blockquote>

<p>答案是没有，但是公司老板对交互这块倒是很看重。</p>

<h2 id="section-2">项目遇到的问题</h2>

<ul>
  <li>前期需求讨论、整理和确定花了不少时间，让团队每个人都能快速理解需求不是一个简单的事情。</li>
  <li>项目时间比较紧急，项目组人员都是新人，大家都是工作过几年的程序员了，每个人都有自己的一套编程风格了，但是大家都在赶功能，
前期可能还会帮助那些没有按照规范写代码的同事修改一下代码，后面我也懒得管了，只要功能保证就可以了，所以这次的项目代码风格会有好几套。</li>
  <li>没有进度表。之前我有介绍项目经理使用一些团队协作平台，不知道是不会用还是是没时间用，反正没用起来，我一个人用也没有用。</li>
  <li>前端工程师缺人还搞前后端分离，所以现在项目是一个 restful 项目和一个 PHP 调用 restful 的项目，所以你会发现我们项目进度比较慢也有一部分是这个原因，有时候你会重复写两套代码。
我觉得这样的架构对以后维护来说是一个坑。</li>
  <li>团队中有2个 PHPer （一共是4个 PHPer，后来又加一个 PHPer）不会使用我们选择的 Yii2 框架。项目这么急，是不会给你多少时间学习框架的。</li>
</ul>

<h2 id="section-3">如果我来做项目经理/产品经理</h2>

<ul>
  <li>首先我认为一个项目经理的技术一定要过硬才行，就目前我的技术来说，还是不行，我打算至少做技术到30岁再考虑其他事情吧。</li>
  <li>沟通能力。做技术的一天到晚都对着电脑，都是不太擅长说话，但是做了项目经理/产品经理少不的要与人沟通，所以这个必须要注意加强学习。</li>
  <li>主动性。有时候要经常拉大家开会，讨论项目什么的。</li>
  <li>善用团队协作工具。我认为这个还是有必要的，不要什么工具都不用，感觉想是软件小作坊，大公司都会有专门的部门为公司内部写工具。</li>
  <li>多看书。保持一个持续学习的心态，也要经常去关注行业最新动态，干 IT 这一行新技术穷出不断，有的你玩。</li>
  <li>保持热爱。我们一生要工作很久很久，只有做你最热爱的工作你才不至于那么累，能会开心，有激情，有成就感。</li>
  <li>有好奇心。热爱一些新出来的产品，乐于去尝试新技术、新产品。这个自认为还可以，经常写代码写累了就去看一下 GitHub 和 Product Hunt 的排行榜去看看。</li>
</ul>

<p>以上就写这么多吧，最后送给大家一句乔布斯的名言：「Stay hungry, stay foolish.」</p>
]]></content>
  </entry>
  
</feed>
