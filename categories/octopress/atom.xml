<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Octopress | forecho 的独立博客]]></title>
  <link href="https://blog.forecho.com/categories/octopress/atom.xml" rel="self"/>
  <link href="https://blog.forecho.com/"/>
  <updated>2020-01-11T03:56:41+00:00</updated>
  <id>https://blog.forecho.com/</id>
  <author>
    <name><![CDATA[forecho]]></name>
    <email><![CDATA[caizhenghai@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress 迁移到 Hugo]]></title>
    <link href="https://blog.forecho.com/octopress-migrate-to-hugo.html"/>
    <updated>2020-01-02T10:48:22+00:00</updated>
    <id>https://blog.forecho.com/octopress-migrate-to-hugo</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">引言</a></li>
  <li><a href="#hugo" id="markdown-toc-hugo">安装 Hugo</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">迁移文章</a>    <ul>
      <li><a href="#section-2" id="markdown-toc-section-2">使用方式</a></li>
    </ul>
  </li>
  <li><a href="#section-3" id="markdown-toc-section-3">最后</a></li>
  <li><a href="#section-4" id="markdown-toc-section-4">参考链接</a></li>
</ul>

<h2 id="section">引言</h2>

<p>终于还是受不了 Octopress 了，准备迁移到 <a href="https://gohugo.io/">Hugo</a>，受不了 Octopress 是因为：</p>

<ul>
  <li>markdown code 语法支持不好，很多时候莫名其妙的 Build 失败，让人抓狂。（最主要原因）</li>
  <li>生成速度太慢，目前生成一次要2分多钟了</li>
  <li>Octopress 项目已经没人维护了</li>
</ul>

<!--more-->

<h2 id="hugo">安装 Hugo</h2>

<p>如果是 Mac 的话直接：</p>

<p><code>sh
brew install hugo
hugo new site blog
cd blog
git init
git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke
echo 'theme = "ananke"' &gt;&gt; config.toml
</code></p>

<p>然后就可以用下面命令生成文章了：</p>

<p><code>sh
hugo new posts/my-first-post.md
</code></p>

<p>开启服务</p>

<p><code>sh
hugo server -D
</code></p>

<p>然后访问 <a href="http://localhost:1313/">http://localhost:1313/</a> 就可以看到你的 Hugo 博客了。</p>

<h2 id="section-1">迁移文章</h2>

<p>官方有<a href="https://gohugo.io/tools/migrations/">迁移指南</a>，Octopress 迁移到 Hugo 官方推荐使用 <a href="https://github.com/codebrane/octohug">octohug</a>，但是我使用下来发现不好用，迁移完之后有小问题。于是我找了一篇文章，结合文章给的代码，自己完善了功能，终于达到我要的效果，参考代码如下：</p>

<p>&#8220;`go
package main</p>

<p>import (
	“flag”
	“fmt”
	“io/ioutil”
	“os”
	“regexp”
	“strings”
)</p>

<p>func main() {
	var src, dst string
	flag.StringVar(&amp;src, “src”, “”, “source”)
	flag.StringVar(&amp;dst, “dst”, “”, “destination”)
	flag.Parse()</p>

<pre><code>if _, err := os.Stat(src); os.IsNotExist(err) {
	panic("source directory does not exist")
}

if _, err := os.Stat(dst); os.IsNotExist(err) {
	if err := os.Mkdir(dst, os.ModePerm); err != nil {
		panic(err)
	}
}

files, err := ioutil.ReadDir(src)
if err != nil {
	panic(err)
}

for _, file := range files {
	filename := file.Name()
	re := regexp.MustCompile(`^\d{4}-\d{2}-\d{2}-(.*).m(arkdown|d)`)
	// Ignore non-matching filenames (i.e. do no dereference nil)
	if matches := re.FindStringSubmatch(filename); matches == nil {
		continue
	}

	in := fmt.Sprintf("%s%s", src, filename)
	data, err := ioutil.ReadFile(in)
	if err != nil {
		panic(err)
	}

    re = regexp.MustCompile(`(\d{4}-\d{2}-\d{2})-(.*)`)
    newFilename := strings.ToLower(re.ReplaceAllString(filename, "$2"))

	re = regexp.MustCompile(`---\n([\s\S]*)---\n([\s\S]*)`)
	matches := re.FindSubmatch(data)
	header := string(matches[1])
	body := string(matches[2])
	draftline := "draft: false\n"

	// date
	re = regexp.MustCompile(`date: (\d{4}-\d{2}-\d{2}) (\d{2}:\d{2}).*\n`)
	header = re.ReplaceAllString(header, `date: ${1}T$2:00+08:00`+"\n")

	// layout
	re = regexp.MustCompile(`layout: .*\n`)
	header = re.ReplaceAllString(header, "")

	// comments
	re = regexp.MustCompile(`comments: .*\n`)
	header = re.ReplaceAllString(header, "")

	// categories
	re = regexp.MustCompile(`categories: (.*)\n`)
	matches = re.FindSubmatch([]byte(header))
	if categories := string(matches[1]); categories != "" {
		tags := strings.ReplaceAll(categories, " ", "\", \"")
		header = re.ReplaceAllString(header, fmt.Sprintf("tags: [\"%s\"] \n", tags))
	}

	more := "toc: true\n"
	header = fmt.Sprintf("%s%s%s", header, draftline, more)

	content := fmt.Sprintf("---\n%s---\n%s", header, body)

	// toc
	toc := "* list element with functor item\n{:toc}\n"
	content = strings.ReplaceAll(content, toc, "")

	content = strings.ReplaceAll(content, "/categories/octopress/atom.xml", "")

	out := dst + newFilename
	fmt.Printf("%s -&gt; %s\n", in, out)

	if err := ioutil.WriteFile(out, []byte(content), 0644); err != nil {
		panic(err)
	}
} } ```
</code></pre>

<h3 id="section-2">使用方式</h3>

<p>在 Octopress 博客根目录下新建一个 <code>main.go</code> 文件，然后把上面代码拷贝进去，然后执行下面代码完成迁移：</p>

<p><code>sh
go run main.go -src octopress-blog/blog/_posts/ -dst hugo-blog/content/posts/
</code></p>

<h2 id="section-3">最后</h2>

<p>这篇文章主要是分享 Octopress 迁移 Hugo 文章的经验，上面的迁移代码不负责，有一点点 Golang 经验应该是看得懂的，你可以根据自己的需求修改代码。</p>

<h2 id="section-4">参考链接</h2>

<ul>
  <li><a href="https://miguelmota.com/blog/migrating-from-jekyll-to-hugo/">Migrating from Jekyll to Hugo</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 显示 ``]]></title>
    <link href="https://blog.forecho.com/about-octopress-use-%7B%7B%7D%7D.html"/>
    <updated>2019-03-06T13:58:22+00:00</updated>
    <id>https://blog.forecho.com/about-octopress-use-</id>
    <content type="html"><![CDATA[<p><strong>注意：</strong> 本篇文章需要点击<a href="https://github.com/forecho/blog/blob/master/source/_posts/2019-03-06-about-octopress-use-%7B%7B%7D%7D.md">这里</a>才能正常阅读。</p>

<p>Octopress 使用双花括号的时候就会自动把他认为是变量，会『翻译』，但是其实我们并不想要这种效果，怎么办呢？网上找了一圈发现可以用下面这种方式解决</p>

<p><code>
{{thing}}
</code></p>

<!--more-->

<p>但是这样的话对去 <a href="https://github.com/forecho/blog/blob/master/source/_posts/2019-03-01-use-postman.md">Github 对应文章</a> 阅读的体验造成很大的破话。解决办法就是把整个文章都包含进去即可：</p>

<p>&#8220;`</p>

<p></p>

<p>文章内容 {{thing}} 文章内容</p>

<p></p>

<p>&#8220;`</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 添加打赏]]></title>
    <link href="https://blog.forecho.com/octopress-add-donate.html"/>
    <updated>2016-01-28T07:36:58+00:00</updated>
    <id>https://blog.forecho.com/octopress-add-donate</id>
    <content type="html"><![CDATA[<h2 id="section">前言</h2>

<p>本来今天是打算给博客添加一个打赏功能的，但是搜索了一下没发现 Octopress 有这个插件，然后就不知道怎么得就折腾 CC 协议插件了。</p>

<p>在折腾的过程中，我突然就学会写插件了，其实很简单。然后我就搜索到一个 hexo 打赏插件（因为懒得写样式和布局），经过几次修改，Octopress 打赏插件就这样诞生了。</p>

<h2 id="section-1">如何添加</h2>

<!--more-->

<p>主要分四步：</p>

<ul>
  <li>添加 <code>source/_includes/post/donate.html</code> 文件，内容可以使用我的 <a href="https://github.com/forecho/blog/blob/master/source%2F_includes%2Fpost%2Fdonate.html">donate.html</a></li>
  <li>修改 <code>sass/custom/_styles.scss</code> 样式文件，添加<a href="https://github.com/forecho/blog/blob/master/source%2F_includes%2Fpost%2Fdonate.html">样式代码</a>，样式代码有点挫，是因为我不会 scss。</li>
  <li>修改 <code>source/_layouts/post.html</code> 布局文件，添加<a href="https://github.com/forecho/blog/blob/master/source%2F_layouts%2Fpost.html#L9-L11">代码</a>。</li>
  <li>修改 <code>_config.yml</code> 配置文件，添加<a href="https://github.com/forecho/blog/blob/master/_config.yml#L138-L140">代码</a>。</li>
</ul>

<p>以上操作完成就可以了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 添加 CC 协议]]></title>
    <link href="https://blog.forecho.com/octopress-add-cc-license.html"/>
    <updated>2016-01-28T05:08:58+00:00</updated>
    <id>https://blog.forecho.com/octopress-add-cc-license</id>
    <content type="html"><![CDATA[<h2 id="section">前言</h2>

<p>如果你不知道什么是 CC 协议，或者你不知道选什么协议，请访问<a href="http://creativecommons.org/choose/">Choose a Licens</a>（内容是中文的）。</p>

<h2 id="section-1">如何添加</h2>

<p>我基本上是使用插件 <a href="https://github.com/hoatle/octopress-cc-license">hoatle/octopress-cc-license</a> 完成的此功能，但是稍作修改，汉化了内容。</p>

<!--more-->

<p>主要分四步：</p>

<ul>
  <li>添加 <code>source/_includes/post/cc_license.html</code> 文件，内容可以使用我的 <a href="https://github.com/forecho/blog/blob/master/source%2F_includes%2Fpost%2Fcc_license.html">cc_license.html</a></li>
  <li>修改 <code>sass/custom/_styles.scss</code> 样式文件，添加<a href="https://github.com/forecho/blog/blob/master/sass%2Fcustom%2F_styles.scss#L22-L38">样式代码</a>。</li>
  <li>修改 <code>source/_layouts/post.html</code> 布局文件，添加<a href="https://github.com/forecho/blog/blob/master/source%2F_layouts%2Fpost.html#L12-L14">代码</a>。</li>
  <li>修改 <code>_config.yml</code> 配置文件，添加<a href="https://github.com/forecho/blog/blob/master/_config.yml#L118-L136">代码</a>。</li>
</ul>

<p>以上操作完成就可以了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 结合 Github 和 Travis-ci 实现自动更新博客]]></title>
    <link href="https://blog.forecho.com/octopress-and-travis-ci.html"/>
    <updated>2015-07-21T09:25:53+00:00</updated>
    <id>https://blog.forecho.com/octopress-and-travis-ci</id>
    <content type="html"><![CDATA[<h2 id="section">前言</h2>

<p>这么久没更新博客了，一是因为 Octopress 虽然在自己的  MacBook 搭建起来了，但是工作电脑还没有，最主要的是工作电脑是 Windows 原来安装 Octopress 本身就是一件蛋疼的事情。对于一个懒人的我来说，一直想找一个自动生成静态博客并且会自动发布的解决方案，差点都准备放弃 Octopress 了，直到今天上午这种方案被我找到，本来以为最多一上午能搞定，没想到花费了我一天时间。</p>

<h2 id="section-1">实现</h2>

<p>主要是利用 travis-ci 提供的持续集成服务实现的，主要分三步就搞定：</p>

<ol>
  <li>用 github 登录<a href="https://travis-ci.org/">Travis-CI</a>,然后开启你要使用集成服务的项目。</li>
  <li>添加 <code>.travis.yml</code> 文件（octopress 默认就有这个文件，我们修改就可以了）。</li>
  <li>只要配置通过，当你 <code>git push</code> 的时候就会自动触发 travis-ci，后面的工作就全自动了。</li>
</ol>

<!--more-->

<h3 id="travisyml">.travis.yml</h3>

<p>详细讲一下这个文件，我全部的时间都在测试这个。先看最终版本代码：</p>

<p><code>
language: ruby
rvm:
  - 2.0.0
before_script:
  - git config --global user.name "forecho"
  - git config --global user.email "caizhenghai@gmail.com"
  - export REPO_URL="https://$GH_TOKEN@github.com/$GH_REPO.git"
  - bundle exec rake setup_github_pages[$REPO_URL]
  - git checkout -- _config.yml
script:
  - bundle exec rake generate
after_script:
  - bundle exec rake deploy
env:
  global:
  - GH_REPO="forecho/blog"
  - secure: Ey/zcMQ6foHssfLpl1O0YATSYXRfDLZBGiYo4r+qlLsmMwokmTK9EyfkQA1Ycyxh3nuFA0Dtn68w+rRj5NXNDK5xd0vkNWME/kHzMo/YpBlJXT0qXWZR9BTqLp88gLPTgYsAu+cBmSoxTbbpRIGL4GE4BRfdk9Tci0QnKfFtN/cS0BoVGI/NH4cCpgh7dBJ/f3k9sUR6mOWuese0BtkxsNoi3ViNFLB+ao4VuReIM6DzDSi5+1/WTiDK52t+0iVoyMorvSEDU3wpxAng7iABcti/CFFhAbg188tCvP+ZkEQUlSmZBQ4oSKNpobSLRQqmopnxZvdkagH/RPk0oth4epJmsIY+gre/HHAsj8bpAROJE/48GI3sY539FFNxy4LtrtWivfOcBF+alpAAWEER3Ktf0Qj7g0WuyGcqKaTeYApropmM5Fpukj1uibBaRyzNSihbY411f9lFzxnzHtNXjqJ0ZnZfZ70u6Oy3+IpJFxkRloiQMwWbg6mCOyKOXhhZ2mmpQu7oJFhLvb+i9QkmJ+v7LiwjBOpkPVRs40jbB078kKE17mOJyBgwKxjYqIY6ycYoJGUr+cQKynQTx67+Md35EC9lqm25a2wjHVlVpVlZ3oUO8q3EGByB1ShtLOQxhfg+a2seH4PK0NkCq7pnHPEiOZfAGIjJ+ayxPWpnDPA=
</code></p>

<p><strong>说明</strong>：</p>

<ul>
  <li>ruby 要用 2.0 版本，不要用 1.9.3 版本，不然你会遇到 <code>incompatible encoding regexp match (ASCII-8BIT regexp with UTF-8 string)</code> 编码问题，就这个问题我浪费了好多时间。</li>
  <li>secure 是要自己生成的，生成教程参考这个 <a href="http://xuhehuan.com/1761.html">打造Octopress博客在线写作平台</a>。</li>
</ul>

<h2 id="section-2">其他问题</h2>

<p>Q: GitHub Pages 可以配置当独的域名吗？</p>

<p>A: 当然可以，多个 GitHub Pages 项目可以每一个配置独立的域名，只要你能保证 GitHub Pages 项目根目录下有一个 <code>CNAME</code> 文件，里面写上域名就可以了。Octopress 的话，只要保证 <code>source</code> 目录下有 <code>CNAME</code> 文件就可以了。</p>

<h2 id="section-3">总结</h2>

<p>如果你不想依赖任何 VPS 和 虚拟空间使用一个博客的话，可以试一下我这个方法。唯一花钱的就是买一个域名。</p>

<p><strong>参考文章:</strong></p>

<ol>
  <li><a href="http://wangmuy.github.io/blog/2013/09-01-octopress-setup.html">用Octopress在GitHub上搭建博客</a></li>
  <li><a href="http://xuhehuan.com/1761.html">打造Octopress博客在线写作平台</a></li>
  <li><a href="http://blog.teracy.com/2013/08/03/how-to-start-blogging-easily-with-octopress-and-teracy-dev/">How to Start Blogging Easily With Octopress and Teracy-dev</a></li>
  <li><a href="https://github.com/teracyhq/blog">teracyhq/blog 项目</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
